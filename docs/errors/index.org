#+TITLE: Simple Domain Modeling Language
#+SUBTITLE: Language Error Codes
#+AUTHOR: Simon Johnston
#+EMAIL: johnstonskj@gmail.com
#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../rtd-sdml.css"/>
#+OPTIONS: toc:3


#+BEGIN_SRC emacs-lisp :exports none
(require 'ebnf-mode)
(require 'ob-sdml)
#+END_SRC

This page provides a reference to the errors, warnings, and informational messages defined in the =sdml_error= crate and
output by the =sdml= command-line tool.

* Bugs

This category represents bugs in the command-line tool where it's parser receives unexpected nodes from the underlying
tree-sitter parser.

** B0001: Tree-Sitter Error Node
:PROPERTIES:
:CUSTOM_ID: B0001
:END:

If the tree-sitter parser itself cannot parse some content it inserts an =error= node in the tree. When the SDML parser
encounters such a node it is clearly a defect in the underlying source, but we don't yet know what.

The =Diagnostic= for this error will attempt to record the file ID, location, and the name of any rule the parser was
processing when the error node was found.

*** Example

#+CAPTION: Example Module
#+NAME: lst:b0001-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> version "" is
  ; missing the version URI, error here  ----------^
end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:b0001-output
#+BEGIN_EXAMPLE
bug[B0001]: tree-sitter parse error encountered
  ┌─ examples/errors/b0002.sdm:1:1
  │  
1 │ ╭ module example <https://example.com/api> version "" is
2 │ │   ; missing the version URI, error here  ----------^
3 │ │ end
4 │ │ 
  │ ╰^ here
  │  
  = in grammar rule: `module`
  = help: encountered a tree-sitter ERROR node in the parse tree
  = help: for more details, see <https://sdml.io/errors/#B0002>  

bug: parser generated 1 bugs.
#+END_EXAMPLE

** B0002: Tree-Sitter Unexpected Node
:PROPERTIES:
:CUSTOM_ID: B0002
:END:

The =Diagnostic= for this error will attempt to record the file ID, location, and the name of any expected nodes along
with the name of the node found.

*** Example

#+CAPTION: Example Module
#+NAME: lst:b0003-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:b0003-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** B0003: Tree-Sitter Missing Node
:PROPERTIES:
:CUSTOM_ID: B0003
:END:

The =Diagnostic= for this error will attempt to record the file ID, location, and the name of any expected nodes along
with the name of any variable that might have contained the expected node.

*** Example

#+CAPTION: Example Module
#+NAME: lst:b0003-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:b0003-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** B0004: Tree-Sitter Missing Variable
:PROPERTIES:
:CUSTOM_ID: B0004
:END:

The =Diagnostic= for this error will attempt to record the file ID, location, and the name of the expected variable along
with the name of the node kind that should have contained the expected variable.

*** Example

#+CAPTION: Example Module
#+NAME: lst:b0004-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:b0004-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE


* Errors

This category represents errors in module loading, in parsing a complete tree-sitter tree, or in module validation.

** E0100: Module Not Found
:PROPERTIES:
:CUSTOM_ID: E0100
:END:

An attempt to load a module failed, specifically a module that was loaded directly, not from another module's import
statements.

*** Example

#+CAPTION: Validation Output
#+NAME: lst:e0100-output
#+BEGIN_EXAMPLE
$ sdml validate orl

error[E0101]: module not found
 = module name `orl`
 = for more details, see <https://sdml.io/errors/#E0101>
#+END_EXAMPLE

** E0101: Imported Module Not Found
:PROPERTIES:
:CUSTOM_ID: E0101
:END:

An attempt to load a module listed in another module's import statement failed.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0101-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import other

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0101-output
#+BEGIN_EXAMPLE
error[E0101]: module named in import statement not found
  ┌─ examples/errors/e0101.sdm:3:10
  │
3 │   import other
  │          ^^^^^ this import
  │
  = help: for more details, see <https://sdml.io/errors/#E0101>  

error: parser generated 1  errors.
#+END_EXAMPLE

** E0102: Module Version Not Found
:PROPERTIES:
:CUSTOM_ID: E0102
:END:

A client module has asked to import a provider module at a /specific version/. However, the resolver found the provider
module but it does not contain a version URI.

*** Example

#+CAPTION: Client Module
#+NAME: lst:e0102-module-client
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import nonversioned_other <https://example.com/api/v2>

end
#+END_SRC

#+CAPTION: Provider Module
#+NAME: lst:e0102-module-provider
#+BEGIN_SRC sdml :exports code :eval never
module nonversioned_other <https://example.com/api> is
end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0102-output
#+BEGIN_EXAMPLE
error[E0102]: imported module has no version URI
  ┌─ examples/errors/e0102.sdm:3:10
  │
3 │   import nonversioned_other <https://example.com/api/v2>
  │          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this import
  │
  ┌─ ./examples/errors/nonversioned_other.sdm:1:1
  │  
1 │ ╭ module nonversioned_other <https://example.com/api> is
2 │ │ end
3 │ │ 
  │ ╰' this module
  │  
  = help: for more details, see <⁨https://sdml.io/errors/#E0102⁩>  

error: module `⁨example⁩` generated ⁨⁨1⁩  errors⁩.
#+END_EXAMPLE

** E0103: Module Version Mismatch
:PROPERTIES:
:CUSTOM_ID: E0103
:END:

A client module has asked to import a provider module at a /specific version/. However, the resolver found the provider
module but it's version URI does not match the client's expected value.

*** Example

#+CAPTION: Client Module
#+NAME: lst:e0103-module-client
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import versioned_other <https://example.com/api/v3>

end
#+END_SRC

#+CAPTION: Provider Module
#+NAME: lst:e0103-module-provider
#+BEGIN_SRC sdml :exports code :eval never
module versioned_other <https://example.com/api>
       version "v2" <https://example.com/api/v2> is
end
#+END_SRC

#+NAME: lst:e0103-output
#+CAPTION: Validation Output
#+BEGIN_EXAMPLE
error[E0103]: actual module URI does not match import requirement
  ┌─ examples/errors/e0103.sdm:3:26
  │
3 │   import versioned_other <https://example.com/api/v3>
  │                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected this version URI
  │
  ┌─ ./examples/errors/versioned_other.sdm:2:21
  │
2 │        version "v2" <https://example.com/api/v2> is
  │                     ---------------------------- module contained this version URI
  │
  = help: for more details, see <https://sdml.io/errors/#E0103>  

error: module `example` generated 1  errors.
#+END_EXAMPLE

** E0104: Duplicate Definition Name
:PROPERTIES:
:CUSTOM_ID: E0104
:END:

A module contains multiple definitions with the same name. A module is a namespace meaning that all definitions within
it *must* have unique names (identifiers).

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0104-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo

  structure Bar

  structure Foo

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0104-output
#+BEGIN_EXAMPLE
error[E0104]: a definition with this name already exists in this module
  ┌─ examples/errors/e0104.sdm:3:13
  │
3 │   structure Foo
  │             ^^^ this definition name
  ·
7 │   structure Foo
  │             --- was previously defined here
  │
  = help: for more details, see <https://sdml.io/errors/#E0104>  

error: module `example` generated 1  errors.
#+END_EXAMPLE

** E0105: Duplicate Member Name
:PROPERTIES:
:CUSTOM_ID: E0105
:END:

An entity, event, or structure definition contains multiple members with the same name. A definition is a namespace
meaning that all members within it *must* have unique names (identifiers).

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0105-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo is
    foo -> string
    bar -> integer
    foo -> boolean
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0105-output
#+BEGIN_EXAMPLE
error[E0105]: a member with this name already exists in this definition
  ┌─ examples/errors/e0105.sdm:6:5
  │
4 │     foo -> string
  │     --- was previously defined here
5 │     bar -> integer
6 │     foo -> boolean
  │     ^^^ this member name
  │
  = help: for more details, see <⁨https://sdml.io/errors/#E0105⁩>  

error: module `⁨example⁩` generated ⁨⁨1⁩  errors⁩.
#+END_EXAMPLE

** E0106: Duplicate Variant Name
:PROPERTIES:
:CUSTOM_ID: E0106
:END:

An enum or union definition contains multiple variants with the same name. A definition is a namespace meaning that all
variants within it *must* have unique names (identifiers).

*** Example Value Variant

#+CAPTION: Example Module
#+NAME: lst:e0106-enum-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  enum EnumFoo of
    Foo
    Bar
    Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0106-enum-output
#+BEGIN_EXAMPLE
error[E0106]: a variant with this name already exists in this definition
  ┌─ examples/errors/e0106-enum.sdm:6:5
  │
4 │     Foo
  │     --- was previously defined here
5 │     Bar
6 │     Foo
  │     ^^^ this variant name
  │
  = help: for more details, see <⁨https://sdml.io/errors/#E0106⁩>  

error: module `⁨example⁩` generated ⁨⁨1⁩  errors⁩.
#+END_EXAMPLE

*** Example Type Variant

#+CAPTION: Example Module
#+NAME: lst:e0106-union-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  union UnionFoo of
    Foo
    Bar
    Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0106-union-output
#+BEGIN_EXAMPLE
error[E0106]: a variant with this name already exists in this definition
  ┌─ examples/errors/e0106-union.sdm:6:5
  │
4 │     Foo
  │     --- was previously defined here
5 │     Bar
6 │     Foo
  │     ^^^ this variant name
  │
  = help: for more details, see <⁨https://sdml.io/errors/#E0106⁩>  

error: module `⁨example⁩` generated ⁨⁨1⁩  errors⁩.
#+END_EXAMPLE

*** Example Type Variant Rename

#+CAPTION: Example Module
#+NAME: lst:e0106-rename-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  union UnionFoo of
    Foo
    Bar
    Boo as Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0106-rename-output
#+BEGIN_EXAMPLE
error[E0106]: a variant with this name already exists in this definition
  ┌─ examples/errors/e0106-rename.sdm:6:12
  │
4 │     Foo
  │     --- was previously defined here
5 │     Bar
6 │     Boo as Foo
  │            ^^^ this variant name
  │
  = help: for more details, see <⁨https://sdml.io/errors/#E0106⁩>  

error: module `⁨example⁩` generated ⁨⁨1⁩  errors⁩.
#+END_EXAMPLE

** E0107: Invalid Identifier
:PROPERTIES:
:CUSTOM_ID: E0107
:END:

API only.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0107-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0107-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** E0108: Invalid Language Tag
:PROPERTIES:
:CUSTOM_ID: E0108
:END:

API only.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0108-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0108-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** E0109: Invalid Value For Type
:PROPERTIES:
:CUSTOM_ID: E0109
:END:

TBD

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0109-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0109-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** E0110: Invalid Module Base Url
:PROPERTIES:
:CUSTOM_ID: E0110
:END:

API only.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0110-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0110-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** E0112: Invalid Module Version Url
:PROPERTIES:
:CUSTOM_ID: E0112
:END:

API only.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0112-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0112-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** E0113: Definition Not Found
:PROPERTIES:
:CUSTOM_ID: E0113
:END:

TBD

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0113-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import [ skos:Unknown ]

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0113-output
#+BEGIN_EXAMPLE
error[E0113]: definition not found in module
  ┌─ examples/errors/e0113.sdm:3:12
  │
3 │   import [ skos:Unknown ]
  │            ^^^^^^^^^^^^ this reference
  │
  = help: for more details, see <https://sdml.io/errors/#E0113>

error: module `example` generated 1  errors
#+END_EXAMPLE

** E0114: Type Definition Not Found
:PROPERTIES:
:CUSTOM_ID: E0114
:END:

A type name, qualified or unqualified, cannot be resolved to a type definition.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0114-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo is
    name -> Bar
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0114-output
#+BEGIN_EXAMPLE
error[E0114]: type definition not found in module
  ┌─ examples/errors/e0114.sdm:4:13
  │
4 │     name -> Bar
  │             ^^^ this reference
  │
  = help: did you forget to add an import for this type, or qualify it's name
  = help: for more details, see <⁨https://sdml.io/errors/#E0114⁩>  

error: module `⁨example⁩` generated ⁨⁨1⁩  errors⁩
#+END_EXAMPLE

** E0115: Datatype Invalid Base
:PROPERTIES:
:CUSTOM_ID: E0115
:END:

The base type for a datatype definition *must* itself be a datatype definition.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0115-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo

  datatype bar <- Foo

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0115-output
#+BEGIN_EXAMPLE
error[E0115]: invalid type for datatype base, not a datatype
  ┌─ examples/errors/e0115.sdm:5:19
  │
5 │   datatype bar <- Foo
  │                   ^^^ this reference
  │
  = help: A type reference in this position must refer to a datatype definition
  = help: for more details, see <⁨https://sdml.io/errors/#E0115⁩>  
#+END_EXAMPLE

** E0116: Type Class Incompatible
:PROPERTIES:
:CUSTOM_ID: E0116
:END:

TBD

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0116-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  class Foo(T)

  structure Bar is
    name -> Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0116-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** E0117: Property Incompatible
:PROPERTIES:
:CUSTOM_ID: E0117
:END:

TBD

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0117-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  property Foo

  structure Bar is
    name -> Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0117-output
#+BEGIN_EXAMPLE
error[E0117]: a property definition is not compatible in this location
  ┌─ examples/errors/e0117.sdm:6:13
  │
6 │     name -> Foo
  │             ^^^ this usage
  │
  = help: for more details, see <https://sdml.io/errors/#E0117>

error: module `example` generated 1  errors
#+END_EXAMPLE

** E0118: RDF Definition Incompatible
:PROPERTIES:
:CUSTOM_ID: E0118
:END:

TBD

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0118-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import rdf

  rdf Foo is
    @rdf:type = rdf:Resource
  end

  structure Bar is
    name -> Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0118-output
#+BEGIN_EXAMPLE
error[E0118]: an RDF definition is not compatible in this location
   ┌─ examples/errors/e0118.sdm:10:13
   │
10 │     name -> Foo
   │             ^^^ this usage
   │
   = help: for more details, see <https://sdml.io/errors/#E0118>

error: module `example` generated 1  errors
#+END_EXAMPLE

** E0119: Feature Set Not a Union
:PROPERTIES:
:CUSTOM_ID: E0119
:END:

When defining a member as a feature extension point, the name after the keyword =features= *must* be a union definition.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0119-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo

  structure Bar is
    name -> features Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0119-output
#+BEGIN_EXAMPLE
error[E0119]: invalid type for feature set, not a union
  ┌─ examples/errors/e0119.sdm:6:22
  │
6 │     name -> features Foo
  │                      ^^^ this reference
  │
  = help: A type reference in this position must refer to a union definition
  = help: for more details, see <⁨https://sdml.io/errors/#E0119⁩>  
#+END_EXAMPLE

** E0120: Property Reference Not a Property
:PROPERTIES:
:CUSTOM_ID: E0120
:END:

When defining a member using a property role, the name after the keyword =in= *must* be a property definition.

*** Example

#+CAPTION: Example Module
#+NAME: lst:e0120-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo

  structure Bar is
    name in Foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:e0120-output
#+BEGIN_EXAMPLE
error[E0120]: member references a non-property as a property
  ┌─ examples/errors/e0120.sdm:6:13
  │
6 │     name in Foo
  │             ^^^ this reference
  │
  = help: A type reference in this position must refer to a property definition
  = help: for more details, see <⁨https://sdml.io/errors/#E0120⁩>  
#+END_EXAMPLE


* Warnings

** W0301: Module Already Imported
:PROPERTIES:
:CUSTOM_ID: W0301:
:END:

An import statement includes a module already imported. This is a warning because the loader will not attempt to
re-parse the same module, but it's more than just bad style.

*** Example

#+CAPTION: Example Module
#+NAME: lst:w0301-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import owl
  import [ dc xsd owl owl ]

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:w0301-output
#+BEGIN_EXAMPLE
warning[W0301]: duplicate import of module
  ┌─ examples/errors/W0301.sdm:5:19
  │
3 │   import owl
  │          --- was previously imported here
4 │ 
5 │   import [ dc xsd owl owl ]
  │                   ^^^ this module
  │
  = for more details, see <https://sdml.io/errors/#W0301>

warning[W0301]: duplicate import of module
  ┌─ examples/errors/W0301.sdm:5:23
  │
3 │   import owl
  │          --- was previously imported here
4 │ 
5 │   import [ dc xsd owl owl ]
  │                       ^^^ this module
  │
  = for more details, see <https://sdml.io/errors/#W0301>

warning: module `example` generated 2 warnings.
#+END_EXAMPLE

** W0302: Member Already Imported
:PROPERTIES:
:CUSTOM_ID: W0302
:END:

An import statement includes a member already imported. This is a warning because the loader will not attempt to
re-parse the same module to access the same member, but it's more than just bad style.

*** Example

#+CAPTION: Example Module
#+NAME: lst:w0302-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import owl:Class
  import [ dc xsd owl:Class ]

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:w0302-output
#+BEGIN_EXAMPLE
warning[W0302]: duplicate import of member
  ┌─ examples/errors/W0302.sdm:5:19
  │
3 │   import owl:Class
  │          --------- was previously imported here
4 │ 
5 │   import [ dc xsd owl:Class ]
  │                   ^^^^^^^^^ this member
  │
  = for more details, see <https://sdml.io/errors/#W0302>

warning: module `example` generated 1 warnings.
#+END_EXAMPLE

** W0303: Validation Incomplete
:PROPERTIES:
:CUSTOM_ID: W0303
:END:

TBD

*** Example

#+CAPTION: Example Module
#+NAME: lst:w0303-module
#+BEGIN_SRC sdml :exports code :eval never
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:w0303-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** W0304: Module Version Info Empty
:PROPERTIES:
:CUSTOM_ID: W0304
:END:

The version information string in the module header is empty. This is suspicious as it's not clear what =""= means as a
version identifier.

*** Example

#+CAPTION: Example Module
#+NAME: lst:w0304-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api>
  version "" <https://example.com/api/v2> is

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:w0304-output
#+BEGIN_EXAMPLE
warning[W0304]: module's version info string is empty
  ┌─ examples/errors/w0304.sdm:1:50
  │
1 │ module example <https://example.com/api> version "" <https://example.com/api/v2> is
  │                                                  ^^ this value
  │
  = help: for more details, see <https://sdml.io/errors/#W0304>  

warning: module `example` generated 1 warnings.
#+END_EXAMPLE

** W0305: Deprecated Term Used
:PROPERTIES:
:CUSTOM_ID: W0305
:END:

The core validation allows for the use of /term sets/ which denote terms that should not be used, and indicates
alternatives that should be used instead.

*** Example

#+CAPTION: Example Module
#+NAME: lst:w0305-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure AccessRecord is
    black_list -> {0..} string
    white_list -> {0..} string
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:w0305-output
#+BEGIN_EXAMPLE
warning[W0305]: found a deprecated term, consider an alternative
  ┌─ examples/errors/w0305.sdm:4:5
  │
4 │     black_list -> {0..} string
  │     ^^^^^^^^^^ here
  │
  = help: consider one of: Block list, Blocked, Deny list, Denied, Exclusion list, Excluded, Unsafe list, Unapproved
  = help: Applies a negative connotation to things that are black and a positive connotation to those that are white.
  = help: for more details, see <https://sdml.io/errors/#W0305>

warning[W0305]: found a deprecated term, consider an alternative
  ┌─ examples/errors/w0305.sdm:5:5
  │
5 │     white_list -> {0..} string
  │     ^^^^^^^^^^ here
  │
  = help: consider one of: Allow list, Allowed, Deny list, Denied, Inclusion list, Included, Safe list, Approved
  = help: Applies a negative connotation to things that are black and a positive connotation to those that are white.
  = help: for more details, see <https://sdml.io/errors/#W0305>  

warning: module name: `example` generated 2 warnings.
#+END_EXAMPLE



* Informational

** I0500: Incomplete Module
:PROPERTIES:
:CUSTOM_ID: I0500:
:END:

The module is /incomplete/ as one or more definitions is incomplete.

*** Example

#+CAPTION: Example Module
#+NAME: lst:i0500-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:i0500-output
#+BEGIN_EXAMPLE
note[I0500]: this module is incomplete
  ┌─ examples/errors/i0500.sdm:1:1
  │  
1 │ ╭ module example <https://example.com/api> is
2 │ │ 
3 │ │   structure Foo
4 │ │ 
5 │ │ end
6 │ │ 
  │ ╰^ this module
  │  
  = help: for more details, see <https://sdml.io/errors/#I0500>
#+END_EXAMPLE

** I0501: Incomplete Definition
:PROPERTIES:
:CUSTOM_ID: I0501:
:END:

The definition is /incomplete/ as it has no body, or as one or more members is incomplete.

*** Example

#+CAPTION: Example Module
#+NAME: lst:i0501-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:i0501-output
#+BEGIN_EXAMPLE
note[I0501]: this definition is incomplete
  ┌─ examples/errors/i0500.sdm:3:3
  │
3 │   structure Foo
  │   ^^^^^^^^^^^^^ this definition
  │
  = help: for more details, see <https://sdml.io/errors/#I0501>
#+END_EXAMPLE

** I0502: Incomplete Member
:PROPERTIES:
:CUSTOM_ID: I0502
:END:

The member is /incomplete/ as it's type is declared to be =unknown=.

*** Example

#+CAPTION: Example Module
#+NAME: lst:i0502-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo is
    bar -> unknown
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:i0502-output
#+BEGIN_EXAMPLE
note[I0502]: this member is incomplete
  ┌─ examples/errors/i0502.sdm:4:5
  │
4 │     bar -> unknown
  │     ^^^^^^^^^^^^^^ this member
  │
  = help: for more details, see <https://sdml.io/errors/#I0503>
#+END_EXAMPLE

** I0503: String Without Language
:PROPERTIES:
:CUSTOM_ID: I0503
:END:

A string literal, usually the value of an attribute property, has no attached language identifier. While this is
grammatically correct it is useful to add language tags to allow future translation.

*** Example

#+CAPTION: Example Module
#+NAME: lst:i0503-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  import dc

  @dc:description = "in unspecified language"

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:i0503-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** I0504: Unconstrained Datatype
:PROPERTIES:
:CUSTOM_ID: I0504
:END:

A builtin datatype, or an RDF/XSD datatype, was used without any qualification. It is generally better to create new
datatypes for members that assert meaningful constraints on the types value-space.

In our example, can a name contain /any/ Unicode codepoint? Can it be of arbitrary length? Can an age be an unbounded
integer, which also implies negative values?

*** Example

#+CAPTION: Example Module
#+NAME: lst:i0504-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo is
    name -> string
    age -> integer
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:i0504-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE

** I0505: Double Underscored Identifier
:PROPERTIES:
:CUSTOM_ID: I0505
:END:

TBD

*** Example

#+CAPTION: Example Module
#+NAME: lst:i0505-module
#+BEGIN_SRC sdml :exports code :eval never
module example <https://example.com/api> is

  structure Foo is
    name__full -> string
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:i0505-output
#+BEGIN_EXAMPLE
#+END_EXAMPLE
** I0506: Identifier Not Preferred Case
:PROPERTIES:
:CUSTOM_ID: I0506
:END:

For readability the following naming conventions are preferred for source code, and this code identifies where
identifies do not conform to these conventions.

| Model Element    | Preferred Case                   | Example               |
|------------------+----------------------------------+-----------------------|
| module           | snake case                       | =rdf=, =rdf_schema=       |
| datatype         | snake or upper camel case        | =integer=, =CustomerId=   |
| rdf definition   | snake or upper camel case        | =type=, =Class=           |
| type definitions | upper camel case                 | =Class=, =Customer=       |
| value variants   | upper camel or /shouty/ snake case | =DebitCard=, =DEBIT_CARD= |
| member           | snake case                       | =nmame=, =customer_id=    |
| imported member  | snake or upper camel case        | =integer=, =CustomerId=   |

*** Example

#+CAPTION: Example Module
#+NAME: lst:i0506-module
#+BEGIN_SRC sdml :exports code :eval never
module Example <https://example.com/api> is

  structure access_record is
    Name -> string
  end

  enum Foo of
    one
    two
  end

  union Bar of
    Foo as foo
  end

end
#+END_SRC

#+CAPTION: Validation Output
#+NAME: lst:i0506-output
#+BEGIN_EXAMPLE
note[I0506]: identifier not using preferred casing
  ┌─ examples/errors/i0506.sdm:1:8
  │
1 │ module Example <https://example.com/api> is
  │        ^^^^^^^ this identifier
  │
  = expected snake case (snake_case)
  = help: for more details, see <https://sdml.io/errors/#I0506>

note[I0506]: identifier not using preferred casing
  ┌─ examples/errors/i0506.sdm:3:13
  │
3 │   structure access_record is
  │             ^^^^^^^^^^^^^ this identifier
  │
  = expected upper camel case (UpperCamelCase)
  = help: for more details, see <https://sdml.io/errors/#I0506>

note[I0506]: identifier not using preferred casing
  ┌─ examples/errors/i0506.sdm:4:5
  │
4 │     Name -> string
  │     ^^^^ this identifier
  │
  = expected snake case (snake_case)
  = help: for more details, see <https://sdml.io/errors/#I0506>

note[I0506]: identifier not using preferred casing
  ┌─ examples/errors/i0506.sdm:8:5
  │
8 │     one
  │     ^^^ this identifier
  │
  = expected upper camel (UpperCamelCase) or shouty snake case (SHOUTY_SNAKE_CASE)
  = help: for more details, see <https://sdml.io/errors/#I0506>

note[I0506]: identifier not using preferred casing
  ┌─ examples/errors/i0506.sdm:9:5
  │
9 │     two
  │     ^^^ this identifier
  │
  = expected upper camel (UpperCamelCase) or shouty snake case (SHOUTY_SNAKE_CASE)
  = help: for more details, see <https://sdml.io/errors/#I0506>

note[I0506]: identifier not using preferred casing
   ┌─ examples/errors/i0506.sdm:13:12
   │
13 │     Foo as foo
   │            ^^^ this identifier
   │
   = expected upper camel case (UpperCamelCase)
   = help: for more details, see <https://sdml.io/errors/#I0506>

note: module `Example` generated 6 informational
#+END_EXAMPLE
