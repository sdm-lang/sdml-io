#+TITLE: RFC002: Event Protocols
#+SUBTITLE: Status: Withdrawn
#+AUTHOR: Simon Johnston
#+EMAIL: johnstonskj@gmail.com
#+LANGUAGE: en
#+OPTIONS: author:nil created:nil creator:nil date:nil email:nil num:3 toc:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../plain-sdml.css"/>
#+HTML_LINK_HOME: ./index.html
#+HTML_LINK_UP: ./index.html

* Introduction

Currently the language includes /event/ definitions which in turn identify the /entity/ that emits them. However, there is
no construct today that defines how events are consumed by an entity. 

*Document Status History*

| Date             | Status    | Comment              | Grammar Version |
|------------------+-----------+----------------------+-----------------|
| [2023-12-07]     | Draft     |                      | =0.2.6=           |
| [2023-12-21 Thu] | Withdrawn | Superceded by  [[./004-type-state-entities.org][RFC004]]  | N/A             |

* Motivation

* Alternatives Considered

** Event List

#+BEGIN_SRC sdml :exports code :noeval
module example is

  import [ inventory vehicle ]

  entity Booking is
    identity id -> string

    vehicle -> {0..1} vehicle:Vehicle

    consumes [
      inventory:VehicleAssigned
      inventory:VehicleAvailable
    ]
  end

end
#+END_SRC


* Proposed Change

Examples here are still in-progress.

#+BEGIN_SRC sdml :exports code :noeval
module example is

  import [ inventory vehicle ]

  entity Booking is
    identity id -> string

    vehicle -> {0..1} vehicle:Vehicle

    accepts
      inventory:VehicleAssigned
        if self.vehicle.is_empty
        then not self.vehicle.is_empty

    accepts
      select while ...
         ... or accepts 
      end

  end

end
#+END_SRC

#+BEGIN_SRC ebnf
Accepts ::=
    "accepts" (AcceptMessage | Select)

AcceptMessage ::=
    IdentifierReference
    ( OperatorIf ConstraintSentence )?
    OperatorThen ( ConstraintSentence | Accepts)

Select ::=
    "select" ( "while" ConstraintSentence )?
    AcceptMessage ( OperatorOr AcceptMessage )*
    "end"
#+END_SRC
