#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* Appendix: Surface Syntax to RDF

This appendix describes the *normative* mapping from the SDML surface syntax into RDF and OWL.

** Whitespace

Whitespace present in the surface syntax has *no* effect on the corresponding RDF.

** Comments

Comments present in the surface syntax are *not* translated into the corresponding RDF.
 
** Identifiers 

Identifiers for modules and type definitions are appended to the base IRI of the module resource, making individual
types within a module directly addressable.

*Example:*

Given a module resource retrieved from =https://example.com/v/example/= and containing the following:

#+BEGIN_SRC sdml :exports code :noeval
module example is
end
#+END_SRC

The module within has the IRI identifier =https://example.com/v/example/example=. However, if the module overrides the
retrieved location using the ~base~ specifier, as follows:

#+BEGIN_SRC sdml :exports code :noeval
module example base <https://example.org/langs/Example#> is
end
#+END_SRC

The module named =example= within this resource now has the absolute IRI identifier =https://example.org/langs/Example#example=.

** Values

Value Literals are necessary for the specification of annotation values. Literals fall into two categories, simple
values and lists with an additional non-literal form the value constructor.

*** <<sec:mapping-values>> Simple Value Literals

#+NAME: tbl:value-literals
#+CAPTION: Summary of Value Literals
| SDML Type | Underlying Type | Value Space                                                   | Lexical Space  |
|-----------+-----------------+---------------------------------------------------------------+----------------|
| =boolean=   | =xsd:boolean=     | The values =true= and =false=.                                    | =true= and =false= |
| =decimal=   | =xsd:decimal=     | A 128-bit representation of a fixed-precision decimal number. | [[https://www.w3.org/TR/xmlschema-2/#decimal][XML Schema]]     |
| =double=    | =xsd:double=      | An IEEE double-precision 64-bit floating point type.          | [[https://www.w3.org/TR/xmlschema-2/#double][XML Schema]]     |
| =integer= | =xsd:integer=     | A signed 64-bit integer.                                      |                |
| =iri=       | =xsd:AnyURI=      | Represents a Uniform Resource Identifier Reference (URI).     | [[https://www.w3.org/TR/xmlschema-2/#anyURI][XML Schema]]     |
| =string=    | =rdf:langString=  | A string value with optional language-tag.                    | [[https://www.w3.org/TR/rdf11-concepts/#section-Graph-Literal][RDF]]            |

*** List Literals

*Example:*

Given the following list literal:

#+BEGIN_SRC sdml :exports code :noeval
module example is

  import skos

  @skos:altLabel = [ "yes" "no" "maybe" ]

end
#+END_SRC

The generated RDF consists of separate statements for each value in the list.

#+BEGIN_SRC ttl
:thing skos:altLabel "yes" .
:thing skos:altLabel "no" .
:thing skos:altLabel "maybe" .
#+END_SRC

For clarity and brevity this is usually written in Turtle as an object list[fn:ttl-ol]:

#+BEGIN_SRC ttl
:thing skos:altLabel "yes", "no", "maybe" .
#+END_SRC

Currently there is no mapping from the surface syntax to list values, that is an RDF Collection[fn:ttl-cs]
which constructs a list using the =rdf:first= and =rdf:rest= predicates. This would result in the following RDF:

#+BEGIN_SRC ttl
:thing skos:altLabel ( "yes" "no" "maybe" ) .
#+END_SRC

*** Value Constructors

A value constructor allows for the precise specification of a datatype for a literal.

#+BEGIN_SRC sdml :exports code :noeval
module example is

  import sdml

  @sdml:defaultVariant = xsd:nonNegativeInteger(0)

end
#+END_SRC

#+BEGIN_SRC ttl
:example sdml:defaultVariant "0"^^xsd:nonNegativeInteger .
#+END_SRC

** Modules

Each module is transformed as follows:

1. A ~@base~ declaration is created with the calculated base IRI for the module.
1. A ~@prefix~ declaration, for the empty prefix, is created with the same value as ~@base~.
1. Add ~@prefix~ declaration for the known prefixes ~owl~, ~rdf~, and ~sdml~.
1. Add the following statements with the subject ~:~,
   1. ~rdf:type~ is ~owl:Ontology~,
   2. ~rdf:type~ is ~sdml:Module~,
   3. ~sdml:srcLabel~ is the identifier for the module.
   
*Example with Implied Base:*

#+BEGIN_SRC sdml :exports code :noeval
module example is end
#+END_SRC

#+BEGIN_SRC ttl
@base <file:///users/me/sdml/modules/example#> .
@prefix : <file:///users/me/sdml/modules/example#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sdml: <https://sdml.io/sdml-owl.ttl#> .

: rdf:type owl:Ontology, sdml:Module ;
    sdml:srcLabel "example" .
#+END_SRC

*Example with Explicit Base:*

The only difference here is that the ~@base~ and ~@prefix~ for the current module have been set explicitly.

#+BEGIN_SRC sdml :exports code :noeval
module example base <https://example.org/langs/Example#> is
end
#+END_SRC

#+BEGIN_SRC ttl
@base <https://example.org/langs/Example#> .
@prefix : <https://example.org/langs/Example#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sdml: <https://sdml.io/sdml-owl.ttl#> .

: rdf:type owl:Ontology, sdml:Module ;
    sdml:srcLabel "example" .
#+END_SRC

** Imports

Each imported module is transformed as follows:

1. The imported module name is used to calculate an IRI relative to the current base.
2. Add ~@prefix~ declaration with the imported module name as prefix.
3. Add an ~owl:imports~ property to the current ontology with the imported module's calculate IRI.

   Any mechanism for the mapping of module names to IRI for off-line resolution is out of scope for this 
*Example:*

#+BEGIN_SRC sdml :exports code :noeval
module example base <https://example.org/langs/Example#> is

  import other

end
#+END_SRC


#+BEGIN_SRC ttl
@base <https://example.org/langs/Example#> .
@prefix : <https://example.org/langs/Example#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sdml: <https://sdml.io/sdml-owl.ttl#> .
@prefix other: <https://example.org/langs/other#> .

: rdf:type owl:Ontology, sdml:Module ;
    owl:imports <https://example.org/langs/other#> ;
    sdml:srcLabel "example" .
#+END_SRC

** Annotations
** Constraints
** Data Type Definitions

*Example:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  datatype name <- string

end
#+END_SRC

#+BEGIN_SRC ttl
:name rdf:type rdfs:Datatype ;
    owl:onDatatype sdml:string ;
    sdml:srcLabel "name" ;
    rdfs:isDefinedBy : .
#+END_SRC

*Example with Restrictions:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  datatype name <- xsd:string is
    @xsd:minLength = 5
    @xsd:maxLength = 25
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:name rdf:type rdfs:Datatype ;
    owl:onDatatype sdml:string ;
    owl:withRestrictions (
        [ xsd:minLength "5"^^xsd:nonNegativeInteger ]
        [ xsd:maxLength "25"^^xsd:nonNegativeInteger ]
    ) ;
    sdml:srcLabel "name" ;
    rdfs:isDefinedBy : .
#+END_SRC

** Entity Definitions

*Example Empty Entity:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  entity Person

end
#+END_SRC

#+BEGIN_SRC ttl
:Person rdf:type owl:Class, sdml:Entity ;
    sdml:srcLabel "Person" ;
    rdfs:isDefinedBy : .
#+END_SRC

*Example Entity with Identity:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  entity Person is
    identity id -> PersonId
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Person rdf:type owl:Class, sdml:Entity ;
    sdml:srcLabel "Person" ;
    rdfs:isDefinedBy :example .

:Person__id rdf:type owl:ObjectProperty, owl:FunctionalProperty ;
    rdfs:domain :Person ;
    rdfs:range :PersonId ;
    sdml:srcLabel "id" ;
    rdfs:isDefinedBy : .
#+END_SRC

*Example Entity with By-Value Member:*

TBD

*Example Entity with By-Reference Member:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  entity Person is
    identity id -> PersonId

    ref contact {0..} -> {0..2} Person is
      @dc:description = "Emergency contact person"
    end
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Person rdf:type owl:Class, sdml:Entity ;
    sdml:srcLabel "Person" ;
    rdfs:isDefinedBy : .

:Person__id rdf:type owl:ObjectProperty, owl:FunctionalProperty ;
    rdfs:domain :Person ;
    rdfs:range :PersonId ;
    sdml:srcLabel "id" .

:Person__contact rdf:type owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:range :PersonId ;
    owl:minCardinality 0 ;
    owl:maxCardinality 2 ;
    owl:inverseOf :Person__contact__inverse ;
    dc::description "Emergency contact person" ;
    sdml:srcLabel "contact" .

:Person__contact__inverse rdf:type owl:ObjectProperty ;
    rdfs:domain :PersonId ;
    rdfs:range :Person ;
    owl:minCardinality 0 ;
    owl:inverseOf :Person__contact ;
    sdml:srcLabel "contact-inverse" .
#+END_SRC

*Example Entity with Group:*

TBD

#+BEGIN_SRC sdml :exports code :noeval
module example is

  entity Person is
    identity id -> PersonId

    group
      @skos:prefLabel = "Identification"
      pref_name -> xsd:string
      alt_name -> xsd:string
    end
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Person rdf:type owl:Class, sdml:Entity ;
    sdml:srcLabel "Person" ;
    rdfs:isDefinedBy : .

_:G01 rdf:type sdml:Group ;
    skos:prefLabel = "Identification"
    sdml:inClassifier :Person.

:Person__pref_name rdf:type owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:range xsd:string ;
    sdml:srcLabel "pref_name" ;
    sdml:inGroup _:G01 .

:Person__alt_name rdf:type owl:ObjectProperty ;
    rdfs:domain :Person ;
    rdfs:range xsd:string ;
    sdml:srcLabel "alt_name" ;
    sdml:inGroup _:G01 .
#+END_SRC

** Enumeration Definitions

*Example Empty Enumeration:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  enum DistanceUnit

end
#+END_SRC

#+BEGIN_SRC ttl
:DistanceUnit rdf:type owl:Class, sdml:Enumeration ;
    sdml:srcLabel "DistanceUnit" ;
    rdfs:isDefinedBy :example .
#+END_SRC

*Example Enumeration with Variants:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  enum DistanceUnit is
    Meter = 1
    Foot = 2
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:DistanceUnit rdf:type owl:Class, sdml:Enumeration ;
    :hasValueVariant [
        rdf:type sdml:EnumerationVariant ;
        sdml:srcLabel "Meter" ;
        rdf:value 1 
    ] ,
    [
        rdf:type sdml:EnumerationVariant ;
        sdml:srcLabel "Foot" ;
        rdf:value 2
    ] .
    sdml:srcLabel "DistanceUnit" ;
    rdfs:isDefinedBy :example .
#+END_SRC

*Example Enumeration with Named Variants:*

Alternatively if the enumeration sets the SDML property =variantTransform= to the value "named" it will alter the
transformation (from the default "anonymous") to RDF such that all variants become named individuals within the
enclosing module.

#+BEGIN_SRC sdml :exports code :noeval
module example is

  import sdml

  enum DistanceUnit is
    @sdml:variantTransform = "named"
  
    Meter = 1
    Foot = 2
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Meter rdf:type owl:Class, sdml:EnumerationVariant ;
    sdml:srcLabel "Meter" ;
    rdf:value 1 .

:Foot rdf:type owl:Class, sdml:EnumerationVariant ;
    sdml:srcLabel "Foot" ;
    rdf:value 2 .

:DistanceUnit rdf:type owl:Class, sdml:Enumeration ;
    :hasValueVariant :Meter ;
    :hasValueVariant :Foot ;
    sdml:srcLabel "DistanceUnit" ;
    rdfs:isDefinedBy :example .
#+END_SRC

** Event Definitions

*Example Empty Event:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  event PersonNameChanged source Person

end
#+END_SRC

#+BEGIN_SRC ttl
:PersonNameChanged rdf:type owl:Class, sdml:Event ;
    sdml:eventSource :Person ;
    sdml:srcLabel "PersonNameChanged" ;
    rdfs:isDefinedBy :example.;
#+END_SRC

*Example Event with Members:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  event PersonNameChanged source Person is
    ;; identifier members will be copied from Person 
    fromValue -> Name
    toValue -> Name
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:PersonNameChanged rdf:type owl:Class, sdml:Event ;
    sdml:eventSource :Person ;
    :hasMember [
        sdml:srcLabel "fromValue" ;
        :targetClassifier :Name
    ] ,
    [
        sdml:srcLabel "toValue" ;
        :targetClassifier :Name
    ] .
    sdml:srcLabel "PersonNameChanged" ;
    rdfs:isDefinedBy :example .
#+END_SRC

** Structure Definitions

*Example Empty Structure:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  structure Length

end
#+END_SRC

#+BEGIN_SRC ttl
:Length rdf:type owl:Class, sdml:Structure ;
    sdml:srcLabel "Length" ;
    rdfs:isDefinedBy :example .
#+END_SRC

*Example Structure with Annotation:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  structure Length is
    @skos:prefLabel = "Length"@en
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Length rdf:type owl:Class, sdml:Structure ;
    skos:prefLabel "Length"@en ;
    sdml:srcLabel "Length" ;
    rdfs:isDefinedBy :example .
#+END_SRC

*Example Structure with Members:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  structure Length is
    @skos:prefLabel = "Length"@en

    value -> Decimal
    unit -> DistanceUnit
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Length rdf:type owl:Class, sdml:Structure ;
    skos:prefLabel "Length"@en .
    :hasMember [
        sdml:srcLabel "value" ;
        :targetClassifier :Decimal ;
    ] ,
    [
        sdml:srcLabel "unit" ;
        :targetClassifier :DistanceUnit ;
    ] ;
    sdml:srcLabel "Length" ;
    rdfs:isDefinedBy :example .
#+END_SRC

*Example Structure with Groups:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  structure Account is
  
    @skos:prefLabel = "Customer Account"@en
  
    group
      @skos:prefLabel = "Metadata"@en
      created -> xsd:dateTime
    end
  
    group
      @skos:prefLabel = "Customer Information"@en
      ref customer -> {1..1} Customer
    end
  
  end

end
#+END_SRC

** Union Definitions

*Example Empty Union:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  union Vehicle

end
#+END_SRC

#+BEGIN_SRC ttl
:Vehicle rdf:type owl:Class, sdml:Union ;
    sdml:srcLabel "Vehicle" ;
    rdfs:isDefinedBy : .
#+END_SRC

*Example Union with Types:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  union Vehicle of
    Car
    Truck
    Boat
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Vehicle rdf:type owl:Class, sdml:Union ;
    sdml:hasTypeVariant :Car ;
    sdml:hasTypeVariant :Truck ;
    sdml:hasTypeVariant :Boat ;
    sdml:srcLabel "Vehicle" ;
    rdfs:isDefinedBy : .
#+END_SRC

*Example Union with Annotation:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  union Vehicle of

    @skos:prefLabel = "Vehicle"@en

    Car
    Truck
    Boat
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Vehicle rdf:type owl:Class, sdml:Union ;
    skos:prefLabel "Vehicle"@en ;
    sdml:hasTypeVariant :Car ;
    sdml:hasTypeVariant :Truck ;
    sdml:hasTypeVariant :Boat .
    sdml:srcLabel "Vehicle" ;
    rdfs:isDefinedBy :example .
#+END_SRC

*Example Union with Rename:*

#+BEGIN_SRC sdml :exports code :noeval
module example is

  union Vehicle of
    Car
    Truck
    Boat as WaterCar
  end

end
#+END_SRC

#+BEGIN_SRC ttl
:Vehicle rdf:type owl:Class, sdml:Union ;
    sdml:hasTypeVariant :Car ;
    sdml:hasTypeVariant :Truck ;
    sdml:hasTypeVariant [
        sdml:srcLabel "WaterCar" ;
        owl:equivalentClass :Boat
    ] ;
    sdml:srcLabel "Vehicle" ;
    rdfs:isDefinedBy :example .
#+END_SRC

** Property Definitions

TBD


# ----- Footnotes

[fn:ttl-ol] RDF 1.1 Turtle -- Terse RDF Triple Language, §[[https://www.w3.org/TR/turtle/#object-lists][2.3 Object Lists]], W3C
[fn:ttl-cs] RDF 1.1 Turtle -- Terse RDF Triple Language, §[[https://www.w3.org/TR/turtle/#object-lists][2.8 Collections]], W3C
