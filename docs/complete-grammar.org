#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty

* <<sec:complete-grammar>>Appendix: Surface Syntax Grammar

The grammar of the surface syntax is presented in Extended Backus–Naur form (EBNF)[fn:ebnf]. The addition of a character literal
range operation =..= reduces the number of single character alternatives for clarity. There are also a set of pre-defined
terminals such as =ASCII_DIGIT=, =ASCII_HEX_DIGIT=, =UC_LETTER_UPPER=, and =UC_LETTER_LOWER= used to simplify character ranges.
While there are many variations[fn:ebnfs] of EBNF in existence, including multiple standardized forms, the specific form
used here follows the notation described the W3C Extensible Markup Language (XML) 1.0 (Fifth Edition), section 6
[[https://www.w3.org/TR/xml/#sec-notation][Notation]].

#+BEGIN_SRC ebnf
Module
    ::= "module" Identifier ModuleBase? ModuleBody

ModuleBase
    ::= "base" IriReference

ModuleBody
    ::= "is"
        ImportStatement* Annotation* Definition*
        "end"

MemberImport
    ::= QualifiedIdentifier

ModuleImport
    ::= Identifer

Import
    ::= MemberImport | ModuleImport

ImportStatement
    ::= "import" ( Import | "[" Import+ "]" )

Annotation
    ::= AnnotationProperty | Constraint

AnnotationProperty
    ::= "@" IdentiferReference "=" Value

Definition
    ::= DataTypeDef
        | EntityDef
        | EnumDef
        | EventDef
        | PropertyDef
        | StructureDef
        | UnionDef

DataTypeDef
    ::= "datatype" Identifier
        TypeRestriction "opaque"? DataTypeBase AnnotationOnlyBody?

TypeRestriction
    ::= "<-" | "←"

DataTypeBase
    ::= IdentifierReference | BuiltinSimpleType

AnnotationOnlyBody
    ::= "is" Annotation+ "end"

EntityDef
    ::= "entity" Identifier EntityBody?

EntityBody
    ::= "is"
        Annotation* EntityIdentity StructuredBodyInner
        "end"

EnumDef
    ::= "enum" Identifier EnumBody?

EnumBody
    ::= "of" Annotation* ValueVariant+ "end"

ValueVariant
    ::= Identifier ByDefinition Unsigned AnnotationOnlyBody?

ByDefinition
    ::= ( ":=" | "≔" )

EventDef
    ::= "event" Identifier
        "source" IdentifierReference
        StructuredBody?

StructureDef
    ::= "structure" Identifier StructuredBody?

StructuredBody
    ::= "is" Annotation* StructuredBodyInner "end"

StructuredBodyInner
    ::= ( MemberGroup | Member )+

MemberGroup
    ::= "group" Annotation* Member+ "end"

UnionDef
    ::= "union" Identifier UnionBody?

UnionBody
    ::= "of"
        Annotation* TypeVariant+
        "end"

TypeVariant
    ::= IdentifierReference TypeVariantRename? AnnotationOnlyBody?

TypeVariantRename
    ::= "as" Identifier

PropertyDef
    ::= "property" Identifier PropertyBody?

PropertyBody
    ::= "is" Annotation* ( IdentityRole | MemberRole )+ "end"

IdentityRole
    ::= "identity" Identifier TypeExpression AnnotationOnlyBody?

MemberRole
    ::= Identifier InverseName? TypeExpressionTo AnnotationOnlyBody?

PropertyReference
    ::= "in" IdentifierReference

EntityIdentity
    ::= "identity" Identifier
        ( PropertyReference | ( TypeExpression AnnotationOnlyBody? ) )

Member
    ::= Identifier
        ( PropertyReference | ( InverseName? TypeExpressionTo AnnotationOnlyBody? ) )

InverseName
    ::= "(" Identifier ")"

TypeExpression
    ::= HasType TypeReference

TypeExpressionTo
    ::= HasType Cardinality? "features"? TypeReference

HasType
    ::= "->" | "→" | "↦"

TypeReference
    ::=  UnknownType | IdentifierReference | BuiltinSimpleType | MappingType

UnknownType
    ::= "unknown"

MappingType
    ::= "(" TypeReference HasType TypeReference ")"

Cardinality
    ::= "{" SequenceOrdering? SequenceUniqueness? CardinalityInner "}"

CardinalityInner
    ::= Unsigned CardinalityRange?

CardinalityRange
    ::= ".." Unsigned?

SequenceOrdering
    ::= ( "ordered" | "unordered" )

SequenceUniqueness
    ::= ( "unique" | "nonunique" )

Value
    ::=  SimpleValue
        | ValueConstructor
        | IdentifierReference
        | MappingValue
        | SequenceOfValues

BuiltinSimpleType
    ::= "string" | "double" | "decimal" | "integer" | "boolean" | "iri"

SimpleValue
    ::= String | Double | Decimal | Integer | Boolean | IriReference

Boolean
    ::= Tautology | Contradiction

Tautology
    ::= ( "true" | "⊤" )

Contradiction
    ::= ( "false" | "⊥" )

NumericSign
    ::= [+-]

Zero
    ::= [0]

NonZero
    ::= [1-9]

Unsigned
    ::= Zero | NonZero ASCII_DIGIT*

Integer
    ::= NumericSign? Unsigned

Decimal
    ::= Integer "." ASCII_DIGIT+

ExponentChar
    ::= [eE]

Double
    ::= Decimal ExponentChar NumericSign? Integer

HexPair
    ::= ASCII_HEX_DIGIT ASCII_HEX_DIGIT

Escape
    ::= "\\" ( CharacterEscape | UnicodeEscape )

CharacterEscape
    ::= [\"\\/abefnrtv]

UnicodeEscape
    ::= "u{" HexPair ( HexPair ( HexPair )? )? "}"

NotAllowed
    ::= [^\"\#x00-#x08#x0B-#x1F#x7F]

QuotedString
    ::= '"' ( Escape | NotAllowed )* '"'

LanguageTag
    ::= "@"
        LanguageTagPrimary
        LanguageTagExtended?
        LanguageTagScript?
        LanguageTagRegion?

LanguageTagPrimary
    ::= ASCII_LETTER_LOWER ASCII_LETTER_LOWER ASCII_LETTER_LOWER?

LanguageTagExtended
    ::= "-"
        ASCII_LETTER_UPPER ASCII_LETTER_UPPER ASCII_LETTER_UPPER

LanguageTagScript
    ::= "-"
        ASCII_LETTER_UPPER ASCII_LETTER_LOWER
        ASCII_LETTER_LOWER ASCII_LETTER_LOWER

LanguageTagRegion
    ::= "-"
        ( ( ASCII_LETTER_UPPER ASCII_LETTER_UPPER )
          | ( ASCII_DIGIT ASCII_DIGIT ASCII_DIGIT ) )

String
    ::= QuotedString LanguageTag?

IriReference
    ::=
    "<"
    ( [^<>\"{}|^`\#x00-#x20] | UnicodeEscape )*
    ">"

ValueConstructor
    ::= IdentifierReference "(" SimpleValue ")"

MappingValue
    ::= SimpleValue HasType Value

SequenceOfValues
    ::= SequenceValueConstraint? "["
        ( SimpleValue | ValueConstructor | IdentifierReference )+
        "]"

SequenceValueConstraint
    ::= "{"
        ( SequenceOrdering? SequenceUniqueness? )
        "}"

IdentifierInitial
    ::= UC_LETTER_UPPER | UC_LETTER_LOWER

IdentifierChar
    ::= IdentifierInitial | UC_NUMBER_DECIMAL

Identifier
    ::= IdentifierInitial IdentifierChar* ( "_" IdentifierChar+ )*

QualifiedIdentifier
    ::= Identifier ":" Identifier

IdentifierReference
    ::= QualifiedIdentifier | Identifier

LineComment
    ::= ";" [^\r\n]*

Whitespace
    ::= [^\f\n\r\t\v#x20#xa0#x1680#x2000#x200a#x2028#x2029#x202f#x205f#x3000#xfeff]
#+END_SRC

*** The Embedded Constraint Language

Given that the /formal/ constraint language component of SDML is likely to be used less frequently *and* the grammar is
fairly long we have made it a separate section.

#+BEGIN_SRC ebnf
Constraint
    ::= "assert" Identifier ( InformalConstraint | FormalConstraint )

InformalConstraint
    ::= "=" QuotedString ControlledLanguageTag?

ControlledLanguageTag
    ::= "@" LanguageTagPrimary ControlledLanguageScheme?

ControlledLanguageScheme
    ::= "-"
        ASCII_LETTER  ASCII_LETTER  ASCII_LETTER
        ASCII_LETTER? ASCII_LETTER? ASCII_LETTER?
        ASCII_LETTER? ASCII_LETTER? ASCII_LETTER?

FormalConstraint
    ::= "is"
        ConstraintEnvironment? ConstraintSentence
        "end"

ConstraintSentence
    ::= SimpleSentence
        | BooleanSentence
        | QuantifiedSentence
        | "(" ConstraintSentence ")"

SimpleSentence
    ::= Atomic | Equation | Inequation

Atomic
    ::= Term "(" Term* ")"

Equation
    ::= Term "=" Term

Inequation
    ::= Term InequationRelation Term

InequationRelation
    ::= ( '/=' | '≠' | '<' | '>' | '<=' | '≤' | '>=' | '≥' )

BooleanSentence
    ::= Negation
        | ConstraintSentence
          (
            Conjunction | Disjunction | ExclusiveDisjunction |
            Implication | Biconditional
          )

Negation
    ::= ( "not" | "¬" ) ConstraintSentence

Conjunction
    ::= ( "and" | "∧" ) ConstraintSentence

Disjunction
    ::= ( "or" | "∨" ) ConstraintSentence

ExclusiveDisjunction
    ::= ( "xor" | "⊻" ) ConstraintSentence

Implication
    ::= ( "implies" | "⇒" ) ConstraintSentence

Biconditional
    ::= ( "iff" | "⇔" ) ConstraintSentence

QuantifiedSentence
    ::= QuantifiedVariableBinding+ QuantifiedBody

QuantifiedVariableBinding
    ::= ( Universal | Existential ) QuantifierBoundNames

Universal
    ::= "forall" | "∀"

Existential
    ::= "exists" | "∃"

QuantifierBoundNames
    ::= "self" | Identifer ( "," Identifer )* IteratorSource

IteratorSource
    ::= TypeIterator | SequenceIterator

TypeIterator
    ::= HasType ( "Self" | IdentifierReference )

SequenceIterator
    ::= ( "in" | "∈" ) ( FunctionComposition | Identifier | SequenceBuilder )

QuantifiedBody
    ::= "(" ConstraintSentence ")"

Term
    ::= FunctionComposition
        | Identifier
        | QualifiedIdentifier
        | PredicateValue
        | FunctionalTerm
        | SequenceBuilder

FunctionComposition
    ::= ( "self" | Identifier ) ( "." Identifier )+

PredicateValue
    ::= SimpleValue | SequenceOfPredicateValues

SequenceOfPredicateValues
    ::= "∅"
        | SequenceValueConstraint?
          "[" ( SimpleValue | IdentifierReference )* "]"

FunctionalTerm
    ::= Term "(" Term* ")"
#+END_SRC

*** Constraint Environment Definitions

#+BEGIN_SRC ebnf
ConstraintEnvironment
    ::= EnvironmentDef+ "in"

EnvironmentDef
    ::= "def" Identifier ( FunctionDef | ConstantDef )

FunctionDef
    ::= FunctionSignature ByDefinition ConstraintSentence

FunctionSignature
    ::= "(" FunctionParameter+ ")" HasType FunctionType

FunctionParameter
    ::= Identifier HasType FunctionType

FunctionType
    ::=  FunctionCardinality? FunctionTypeRef

FunctionCardinality
    ::= "{"
        SequenceOrdering? SequenceUniqueness? ( Wildcard | CardinalityInner )
        "}"

FunctionTypeRef
    ::= Wildcard | IdentiferReference | BuiltinSimpleType | MappingType

Wildcard
    ::= "_"

ConstantDef
    ::= ( ":=" | "≔" ) ( PredicateValue | ConstraintSentence )
#+END_SRC

*** Sequence Builders

#+BEGIN_SRC ebnf
SequenceBuilder
    ::= "{"
        ( VariableNameSet | MappingVariable )
        "|"
        VariableBinding+ ConstraintSentence
        "}"

VariableNameSet
    ::= Identifier+

MappingVariable
    ::= "(" Identifier HasType Identifier ")"

VariableBinding
    ::= ( Universal | Existential ) QuantifierBinding ","
#+END_SRC


# ----- Footnotes

[fn:ebnf] [[https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form][Extended Backus-Naur Form (EBNF)]], Wikipedia
[fn:ebnfs] See [[http://www.cs.man.ac.uk/~pjj/bnf/ebnf.html][BNF/EBNF Variants]]
