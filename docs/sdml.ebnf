Module
    ::= "module" Identifier ModuleBase? ModuleBody

ModuleBase
    ::= "base" Iri

ModuleBody
    ::= "is"
        ImportStatement* Annotation* Definition*
        "end"

ImportStatement
    ::= "import" ( Import | "[" Import+ "]" )

Import
    ::= MemberImport | ModuleImport

ModuleImport
    ::= Identifer

MemberImport
    ::= QualifiedIdentifier

Annotation
    ::= AnnotationProperty | Constraint

AnnotationProperty
    ::= "@" IdentiferReference "=" Value

Definition
    ::= DataTypeDef
        | EntityDef
        | EnumDef
        | EventDef
        | PropertyDef
        | StructureDef
        | TypeClassDef
        | UnionDef

DataTypeDef
    ::= "datatype" Identifier
        TypeRestriction "opaque"? DataTypeBase AnnotationOnlyBody?

TypeRestriction
    ::= "<-" | "←"

DataTypeBase
    ::= IdentifierReference | BuiltinSimpleType

AnnotationOnlyBody
    ::= "is" Annotation+ "end"

EntityDef
    ::= "entity" Identifier EntityBody?

EntityBody
    ::= "is"
        Annotation* EntityIdentity StructuredBodyInner
        "end"

EnumDef
    ::= "enum" Identifier EnumBody?

EnumBody
    ::= "of" Annotation* ValueVariant+ "end"

ValueVariant
    ::= Identifier ByDefinition Unsigned AnnotationOnlyBody?

ByDefinition
    ::= ( ":=" | "≔" )

EventDef
    ::= "event" Identifier
        "source" IdentifierReference
        StructuredBody?

StructureDef
    ::= "structure" Identifier StructuredBody?

StructuredBody
    ::= "is" Annotation* StructuredBodyInner "end"

StructuredBodyInner
    ::= ( MemberGroup | Member )+

MemberGroup
    ::= "group" Annotation* Member+ "end"

UnionDef
    ::= "union" Identifier UnionBody?

UnionBody
    ::= "of"
        Annotation* TypeVariant+
        "end"

TypeVariant
    ::= IdentifierReference TypeVariantRename? AnnotationOnlyBody?

TypeVariantRename
    ::= "as" Identifier

PropertyDef
    ::= "property" Identifier PropertyBody?

PropertyBody
    ::= "is" Annotation* ( IdentityRole | MemberRole )+ "end"

IdentityRole
    ::= "identity" Identifier TypeExpression AnnotationOnlyBody?

MemberRole
    ::= Identifier InverseName? TypeExpressionTo AnnotationOnlyBody?

TypeClassDef
    ::= "class" Identifier TypeClassParameters TypeClassBody?

TypeClassParameters
    ::= "(" TypeVariable+ ")"

TypeVariable
    ::= FunctionCardinality? Identifier TypeVariableSubtype?

TypeVariableSubtype
    ::= HasType ( Wildcard | IdentiferReference TypeClassParameters? )

Wildcard
    ::= "_"

TypeClassBody
    ::= "is" Annotation* MethodDef+ "end"

MethodDef
    ::= "def" Identifier FunctionSignature FunctionBody? AnnotationOnlyBody?

PropertyReference
    ::= "in" IdentifierReference

EntityIdentity
    ::= "identity" Identifier
        ( PropertyReference | ( TypeExpression AnnotationOnlyBody? ) )

Member
    ::= Identifier
        ( PropertyReference | ( InverseName? TypeExpressionTo AnnotationOnlyBody? ) )

InverseName
    ::= "(" Identifier ")"

TypeExpression
    ::= HasType TypeReference

TypeExpressionTo
    ::= HasType Cardinality? "features"? TypeReference

HasType
    ::= "->" | "→" | "↦"

TypeReference
    ::=  UnknownType | IdentifierReference | BuiltinSimpleType | MappingType

UnknownType
    ::= "unknown"

MappingType
    ::= "(" TypeReference HasType TypeReference ")"

Cardinality
    ::= "{" SequenceOrdering? SequenceUniqueness? CardinalityInner "}"

CardinalityInner
    ::= Unsigned CardinalityRange?

CardinalityRange
    ::= ".." Unsigned?

SequenceOrdering
    ::= ( "ordered" | "unordered" )

SequenceUniqueness
    ::= ( "unique" | "nonunique" )

Value
    ::=  SimpleValue
        | ValueConstructor
        | IdentifierReference
        | MappingValue
        | SequenceOfValues

SimpleValue
    ::= Boolean
        | Unsigned | Integer | Decimal| Double
        | String | Iri | Binary

BuiltinSimpleType
    ::= "boolean"
        | "unsigned" | "integer"| "decimal"| "double"
        | "string" | "iri" | "binary"

Boolean
    ::= Truth | Falsity

Truth
    ::= ( "true" | "⊤" )

Falsity
    ::= ( "false" | "⊥" )

NumericSign
    ::= [+-]

Zero
    ::= [0]

NonZero
    ::= [1-9]

Unsigned
    ::= Zero | NonZero ASCII_DIGIT*

Integer
    ::= NumericSign? Unsigned

Decimal
    ::= Integer "." ASCII_DIGIT+

ExponentChar
    ::= [eE]

Double
    ::= Decimal ExponentChar NumericSign? Integer

String
    ::= QuotedString LanguageTag?

QuotedString
    ::= '"' ( Escape | NotAllowed )* '"'

NotAllowed
    ::= [^\"\#x00-#x08#x0B-#x1F#x7F]

Escape
    ::= "\\" ( CharacterEscape | UnicodeEscape )

CharacterEscape
    ::= [\"\\/abefnrtv]

UnicodeEscape
    ::= "u{" HexPair ( HexPair ( HexPair )? )? "}"

HexPair
    ::= ASCII_HEX_DIGIT ASCII_HEX_DIGIT

LanguageTag
    ::= "@"
        LanguageTagPrimary
        LanguageTagExtended?
        LanguageTagScript?
        LanguageTagRegion?

LanguageTagPrimary
    ::= ASCII_LETTER_LOWER ASCII_LETTER_LOWER ASCII_LETTER_LOWER?

LanguageTagExtended
    ::= "-"
        ASCII_LETTER_UPPER ASCII_LETTER_UPPER ASCII_LETTER_UPPER

LanguageTagScript
    ::= "-"
        ASCII_LETTER_UPPER ASCII_LETTER_LOWER
        ASCII_LETTER_LOWER ASCII_LETTER_LOWER

LanguageTagRegion
    ::= "-"
        ( ( ASCII_LETTER_UPPER ASCII_LETTER_UPPER )
          | ( ASCII_DIGIT ASCII_DIGIT ASCII_DIGIT ) )

Iri
    ::= "<"
        ( [^<>\"{}|^`\#x00-#x20] | UnicodeEscape )*
        ">"

Binary
    ::= "#[" HexPair* "]"

ValueConstructor
    ::= IdentifierReference "(" SimpleValue ")"

MappingValue
    ::= SimpleValue HasType Value

SequenceOfValues
    ::= SequenceValueConstraint? "["
        ( SimpleValue | ValueConstructor | IdentifierReference )+
        "]"

SequenceValueConstraint
    ::= "{"
        ( SequenceOrdering? SequenceUniqueness? )
        "}"

IdentifierInitial
    ::= UC_LETTER_UPPER | UC_LETTER_LOWER

IdentifierChar
    ::= IdentifierInitial | UC_NUMBER_DECIMAL

Identifier
    ::= IdentifierInitial
        IdentifierChar* ( "_" IdentifierChar+ )*

QualifiedIdentifier
    ::= Identifier ":" Identifier

IdentifierReference
    ::= QualifiedIdentifier | Identifier

LineComment
    ::= ";" [^\r\n]*

Whitespace
    ::= [^\f\n\r\t\v#x20#xa0#x1680#x2000#x200a#x2028#x2029#x202f#x205f#x3000#xfeff]

/* --------------------------------------------------------------------------- */

Constraint
    ::= "assert" Identifier ( InformalConstraint | FormalConstraint )

InformalConstraint
    ::= "=" QuotedString ControlledLanguageTag?

ControlledLanguageTag
    ::= "@" LanguageTagPrimary ControlledLanguageScheme?

ControlledLanguageScheme
    ::= "-"
        ASCII_LETTER  ASCII_LETTER  ASCII_LETTER
        ASCII_LETTER? ASCII_LETTER? ASCII_LETTER?
        ASCII_LETTER? ASCII_LETTER? ASCII_LETTER?

FormalConstraint
    ::= "is"
        ConstraintEnvironment? ConstraintSentence
        "end"

ConstraintSentence
    ::= SimpleSentence
        | BooleanSentence
        | QuantifiedSentence
        | "(" ConstraintSentence ")"

SimpleSentence
    ::= Atomic | Equation | Inequation

Atomic
    ::= Term ActualArguments

ActualArguments
    ::= "(" Term* ")"

Equation
    ::= Term "=" Term

Inequation
    ::= Term InequationRelation Term

InequationRelation
    ::= ( '/=' | '≠' | '<' | '>' | '<=' | '≤' | '>=' | '≥' )

BooleanSentence
    ::= UnaryBooleanSentence | BinaryBooleanSentence

UnaryBooleanSentence
    ::= NegationOperator ConstraintSentence

BinaryBooleanSentence
    ::= ConstraintSentence LogicalConnective ConstraintSentence

LogicalConnective
    ::= ConjunctionOperator
        | DisjunctionOperator
        | ExclusiveDisjunctionOperator
        | ImplicationOperator
        | BiconditionalOperator

NegationOperator
    ::= ( "not" | "¬" )

ConjunctionOperator
    ::= ( "and" | "∧" )

DisjunctionOperator
    ::= ( "or" | "∨" )

ExclusiveDisjunctionOperator
    ::= ( "xor" | "⊻" )

ImplicationOperator
    ::= ( "implies" | "⇒" )

BiconditionalOperator
    ::= ( "iff" | "⇔" )

QuantifiedSentence
    ::= QuantifiedVariableBinding+ ","? ConstraintSentence

QuantifiedVariableBinding
    ::= ( UniversalQuantifier | ExistentialQuantifier ) QuantifiedVariable

UniversalQuantifier
    ::= "forall" | "∀"

ExistentialQuantifier
    ::= "exists" | "∃"

QuantifiedVariable
    ::= ReservedSelf | Identifer MembershipOperator Term

MembershipOperator
    ::= ( "in" | "∈" )

Term
    ::= SequenceBuilder
        | FunctionalTerm
        | FunctionComposition
        | IdentifierReference
        | ReservedSelf
        | PredicateValue

FunctionalTerm
    ::= Term ActualArguments

FunctionComposition
    ::= ( "self" | Identifier ) ( "." Identifier )+

PredicateValue
    ::= SimpleValue | SequenceOfPredicateValues

SequenceOfPredicateValues
    ::= "∅"
        | SequenceValueConstraint?
          "[" ( SimpleValue | IdentifierReference )* "]"

ReservedSelf
    ::= "self"

/* --------------------------------------------------------------------------- */

ConstraintEnvironment
    ::= EnvironmentDef+ "in"

EnvironmentDef
    ::= "def" Identifier ( FunctionDef | ConstantDef )

FunctionDef
    ::= FunctionSignature FunctionBody

FunctionSignature
    ::= ( "(" FunctionParameter+ ")" )? FunctionType

FunctionParameter
    ::= Identifier FunctionType

FunctionType
    ::= HasType FunctionCardinality? FunctionTypeRef

FunctionCardinality
    ::= "{"
        SequenceOrdering? SequenceUniqueness? CardinalityInner?
        "}"

FunctionTypeRef
    ::= IdentiferReference | BuiltinSimpleType | MappingType

FunctionBody
    ::= ByDefinition ConstraintSentence

ConstantDef
    ::= ByDefinition ( PredicateValue | ConstraintSentence )

/* --------------------------------------------------------------------------- */

SequenceBuilder
    ::= "{"
        ( NamedVariableSet | MappingVariable )
        "|"
        SequenceBuilderBody
        "}"

NamedVariableSet
    ::= Identifier+

MappingVariable
    ::= "(" Identifier HasType Identifier ")"

SequenceBuilderBody
    ::= QuantifiedSentence | "(" QuantifiedSentence ")"
